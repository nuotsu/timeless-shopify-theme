{%- liquid
  if section.settings.offset > 0
    assign has_offset = true
  else
    assign has_offset = false
  endif
-%}

<input id="header-menu-opened" type="checkbox" hidden>

<div class="
  header backdrop-blur-sm text-[var(--ink)] bg-[var(--canvas-opacity)] transition-[background-color,box-shadow] [&:is(:hover,:has([open]))]:bg-[var(--canvas)] <sm:overflow-hidden
  {% if has_offset %}max-w-screen-xl mx-auto rounded-[var(--border-radius)] [&:has(.megamenu[open])]:sm:rounded-b-none{% endif %}
">
  <div class="header-grid section grid gap-x-4 py-0 sm:pt-4 md:pt-0 <sm:max-h-[100dvh] <sm:overflow-x-hidden <sm:overflow-y-auto">
    <div style="grid-area: logo;" class="flex items-center gap-4 sticky top-0 z-[1] <sm:py-4 transition-colors">
      {%- if section.settings.logo -%}
        {{ section.settings.logo
          | image_url: width: 300
          | image_tag: class: 'max-w-[160px] max-h-[160px] object-contain', loading: 'lazy'
          | link_to: routes.root_url
        }}
      {%- else -%}
        {{ shop.name | link_to: routes.root_url, class: 'font-heading' }}
      {%- endif -%}

      <label for="header-menu-opened" class="with-icon ml-auto sm:hidden" aria-label="Toggle header menu">
        <span class="toggle-open">{% render 'icon' with 'mobile-hamburger' %}</span>
        <span class="toggle-close">{% render 'icon' with 'cancel' %}</span>
      </label>
    </div>

    {% render 'header-menu' %}
    {% render 'header-actions' %}
  </div>
</div>

<style type="text/tailwindcss">
  #shopify-section-{{ section.id }} {
    --canvas: {{ section.settings.color_scheme.settings.canvas }};
    --canvas-opacity: {{ section.settings.color_scheme.settings.canvas }}cc;
    --canvas-subdued: {{ section.settings.color_scheme.settings.canvas_subdued }};
    --ink: {{ section.settings.color_scheme.settings.ink }};
  }

  #shopify-section-{{ section.id }}:has(#header-menu-opened:not(:checked)) {
    @apply m-{{ section.settings.offset }} top-{{ section.settings.offset }};
  }

  .is-scrolled .header {
    @apply shadow-lg;
  }

  @screen sm {
    .megamenu-contents,
    .dropdown-contents {
      @apply absolute top-full bg-[var(--canvas)] rounded-b-[var(--border-radius)] shadow-xl;
    }
  }

  @screen <sm {
    #header-menu-opened:checked ~ .header {
      @apply bg-[var(--canvas)] shadow-xl;
    }

    #header-menu-opened:checked ~ .header [style*="logo"] {
      @apply bg-[var(--canvas)];
    }

    #header-menu-opened:checked ~ .header .toggle-open,
    #header-menu-opened:not(:checked) ~ .header :is(.toggle-close, [style*="actions"], [style*="menu"]) {
      display: none;
    }

    .megamenu-contents,
    .dropdown-contents {
      @apply my-1 py-1 pl-3 border-l border-stroke;
    }
  }

  .header-grid {
    grid-template-areas: 'logo' 'menu' 'actions';
  }

  @screen sm {
    .header-grid {
      grid-template-columns: 1fr auto;
      grid-template-areas:
        'logo actions'
        'menu menu';
    }
  }

  @screen md {
    .header-grid {
      grid-template-columns: auto 1fr auto;
      grid-template-areas: 'logo menu actions';
    }
  }
</style>

<script defer>
  (function(){
    const header = document.querySelector('#shopify-section-{{ section.id }}')

    function setHeaderHeight() {
      document.documentElement.style.setProperty('--header-height', `${ header.offsetHeight }px`)
    }
    setHeaderHeight()
    document.addEventListener('resize', setHeaderHeight)

    // header menus events

    const headerMenus = header.querySelectorAll('[style*="menu"] details')

    function updateHeaderMenuEvents() {
      const { matches } = window.matchMedia('(min-width: 640px) and (hover: hover)')

      if (matches) {
        headerMenus.forEach(menu => {
          menu.addEventListener('mouseenter', mouseenter)
          menu.addEventListener('mouseleave', mouseleave)
        })
      } else {
        headerMenus.forEach(menu => {
          menu.removeEventListener('mouseenter', mouseenter)
          menu.removeEventListener('mouseleave', mouseleave)
        })
      }
    }
    updateHeaderMenuEvents()

    function mouseenter() { this.setAttribute('open', '') }
    function mouseleave() { this.removeAttribute('open') }

    window.addEventListener('resize', updateHeaderMenuEvents)

    window.addEventListener('scroll', e => {
      const { scrollTop } = e.target.documentElement
      const announcementHeight = Array.from(document.querySelectorAll('.section-announcement')).reduce((acc, el) => acc + el.offsetHeight, 0)
      const headerHeight = header.offsetHeight / 2

      if (scrollTop > (announcementHeight + headerHeight)) {
        header.classList.add('is-scrolled')
      } else {
        header.classList.remove('is-scrolled')
      }
    })
  })()
</script>

{% schema %}
{
  "name": "Header",
  "tag": "header",
  "class": "sticky z-10 top-0 transition-all",
  "settings": [
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "Color scheme"
    },
    {
      "type": "range",
      "id": "offset",
      "min": 0,
      "max": 8,
      "label": "Offset",
      "info": "Spacing from the edges of the screen",
      "default": 0
    },
    {
      "type": "image_picker",
      "id": "logo",
      "label": "Logo"
    },
    {
      "type": "link_list",
      "id": "menu",
      "label": "Menu",
      "default": "main-menu"
    },
    {
      "type": "header",
      "content": "Cart"
    },
    {
      "type": "checkbox",
      "id": "show_cart_item_count",
      "label": "Show cart item count",
      "info": "Disable to show a dot indicator when the cart has items",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_cart_subtotal",
      "label": "Show cart subtotal",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "megamenu",
      "name": "Mega menu",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "info": "Makes the linklist with the same title a full-width megamenu"
        }
      ]
    },
    {
      "type": "featured_link",
      "name": "Featured link",
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title",
          "info": "Makes megamenu links with the same title stylized"
        },
        {
          "type": "image_picker",
          "id": "image",
          "label": "Image"
        }
      ]
    }
  ]
}
{% endschema %}
